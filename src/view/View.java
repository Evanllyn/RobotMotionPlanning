/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import data.FreeSpace;
import data.Obstacles;
import data.Point;
import data.Robot;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Rectangle2D;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;

/**
 *
 * @author Aleksandra
 */
public class View extends javax.swing.JFrame implements ActionListener{
    
    
   
    //Top
    Obstacles obTopLeft = new Obstacles(new Point(256,0,0), new Point(256,250,0));
    Obstacles obTopBot = new Obstacles(new Point(256,250,0), new Point(512,250,0));
    Obstacles obTopRight = new Obstacles(new Point(512,250,0), new Point(512,0,0));
    
    //Bottom
    Obstacles obBotLeft = new Obstacles(new Point(256,300,0), new Point(256,600,0));
    Obstacles obBotTop = new Obstacles(new Point(256,300,0), new Point(512,300,0));
    Obstacles obBotRight = new Obstacles(new Point(512,300,0), new Point(512,600,0));
    
    //Robot
    Robot r1 = new Robot(new Point(0,0,1), new Point(0,60,1), new Point(30,0,1), new Point(30,60,1), new Point(0, 0, 1), 0);
    Robot r2 = new Robot(new Point(0,0,1), new Point (0,30,0), new Point(60, 0, 1), new Point(60, 30, 1), new Point(0, 0, 1), 90);
    
    Graphics g;
    
    //Trapeze Free
    FreeSpace left = new FreeSpace(new Point(0, 0, 10), new Point(0, 600, 10), new Point(256, 0, 10), new Point(256, 600, 10), new Point(0, 0, 10));
    FreeSpace center = new FreeSpace(new Point(256, 250, 10), new Point(256, 300, 10), new Point(512, 250, 10), new Point(512, 300, 10), new Point(0, 0, 10));
    FreeSpace right = new FreeSpace(new Point(512, 0, 10), new Point(512, 600, 10), new Point(770, 0, 10), new Point(770, 600, 10), new Point(0, 0, 10));
    
    Timer t = new Timer(5,this);
    double x = 0, y = 0, velX = 2, velY = 2;
    
    
    
    public View() {
        initComponents();
        g = jPanel1.getGraphics();
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
        jButton4.setEnabled(false);
        jCheckBox1.setEnabled(false);
        jCheckBox2.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 778, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 605, Short.MAX_VALUE)
        );

        jButton1.setText("Przeszkody");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Wolny obszar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Pokaż trasę");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Animacja");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("droga robota 0");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("droga robota 90");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(51, 255, 0));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 26, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 24, Short.MAX_VALUE)
        );

        jLabel1.setText("Robot 90 stopni");

        jPanel3.setBackground(new java.awt.Color(51, 51, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 26, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 24, Short.MAX_VALUE)
        );

        jLabel2.setText("Robot 0 stopni");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jCheckBox1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                            .addComponent(jCheckBox2)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBox1)
                            .addComponent(jCheckBox2))
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jButton2.setEnabled(true);
        obTopLeft.draw(g);
        obTopBot.draw(g);
        obTopRight.draw(g);
        
        obBotLeft.draw(g);
        obBotTop.draw(g);
        obBotRight.draw(g);
        g.drawLine(0, 0, 770, 0);
        g.drawLine(770, 0, 770, 600);
        g.drawLine(770, 600, 0, 600);
        g.drawLine(0, 600, 0, 0);
        r1.getSrodek();
        r2.getSrodek();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        jButton3.setEnabled(true);
        left.getFreeCenter();
        center.getFreeCenter();
        right.getFreeCenter();
        
        g.setColor(Color.BLUE);
        g.drawLine((int) left.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r1, new Point(0,0,0)).getY(), (int) left.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r1, new Point(0,0,0)).getY(), (int) left.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r1, new Point(0,0,0)).getY(), (int) left.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r1, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r1, new Point(0,0,0)).getY(), (int) left.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r1, new Point(0,0,0)).getY());
        
        g.drawLine((int) right.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r1, new Point(0,0,0)).getY(), (int) right.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r1, new Point(0,0,0)).getY(), (int) right.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r1, new Point(0,0,0)).getY(), (int) right.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r1, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r1, new Point(0,0,0)).getY(), (int) right.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r1, new Point(0,0,0)).getY());
        
        g.setColor(Color.GREEN);
        g.drawLine((int) left.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r2, new Point(0,0,0)).getY(), (int) left.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r2, new Point(0,0,0)).getY(), (int) left.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r2, new Point(0,0,0)).getY(), (int) left.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r2, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r2, new Point(0,0,0)).getY(), (int) left.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r2, new Point(0,0,0)).getY());
        
        g.drawLine((int) right.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r2, new Point(0,0,0)).getY(), (int) right.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r2, new Point(0,0,0)).getY(), (int) right.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r2, new Point(0,0,0)).getY(), (int) right.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r2, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r2, new Point(0,0,0)).getY(), (int) right.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r2, new Point(0,0,0)).getY());
        
        g.drawLine(226,251,542,251);
        
        g.drawLine(226,299,542,299);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jCheckBox1.setEnabled(true);
        jCheckBox2.setEnabled(true);
        jButton4.setEnabled(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
       
        //trasa robota 0*
       if(jCheckBox1.isSelected()){
           g.setColor(Color.blue);
           g.drawLine((int)r1.getSrodek().getX(), (int)r1.getSrodek().getY(),
                   (int)left.getFreeCenter().getX(), (int)left.getFreeCenter().getY());
           g.drawLine((int)left.getFreeCenter().getX(), (int)left.getFreeCenter().getY(), 226, 265);
           g.drawLine(542, 265, (int)right.getFreeCenter().getX(), (int)right.getFreeCenter().getY());
           g.drawLine((int)right.getFreeCenter().getX(), (int)right.getFreeCenter().getY(),
                   (int)right.FreeDotRB(r1, new Point(0,0,0)).getX(), (int)right.FreeDotRB(r1, new Point(0,0,0)).getY());
           
         
       } else if(jCheckBox2.isSelected()){
        g.clearRect(0, 0, 770, 600);
        obTopLeft.draw(g);
        obTopBot.draw(g);
        obTopRight.draw(g);
        
        obBotLeft.draw(g);
        obBotTop.draw(g);
        obBotRight.draw(g);
        g.drawLine(0, 0, 770, 0);
        g.drawLine(770, 0, 770, 600);
        g.drawLine(770, 600, 0, 600);
        g.drawLine(0, 600, 0, 0);
        r1.getSrodek();
        r2.getSrodek();
        
      g.setColor(Color.green);
      g.drawLine((int)r2.getSrodek().getX(), (int)r2.getSrodek().getY(), 
              (int)left.getFreeCenter().getX(), (int)left.getFreeCenter().getY());
      g.drawLine((int)left.getFreeCenter().getX(), (int)left.getFreeCenter().getY(), 226, 265);
      g.drawLine(226, 265, (int)center.getFreeCenter().getX(), (int)center.getFreeCenter().getY());
      g.drawLine((int)center.getFreeCenter().getX(), (int)center.getFreeCenter().getY(), 542, 265);
      g.drawLine(542, 265,(int)right.getFreeCenter().getX(), (int)right.getFreeCenter().getY());
      g.drawLine((int)right.getFreeCenter().getX(), (int)right.getFreeCenter().getY(),
              (int)right.FreeDotRB(r2, new Point(0,0,1)).getX(),(int)right.FreeDotRB(r2, new Point(0,0,1)).getY() );
      
      g.setColor(Color.BLUE);
        g.drawLine((int) left.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r1, new Point(0,0,0)).getY(), (int) left.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r1, new Point(0,0,0)).getY(), (int) left.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r1, new Point(0,0,0)).getY(), (int) left.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r1, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r1, new Point(0,0,0)).getY(), (int) left.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r1, new Point(0,0,0)).getY());
        
        g.drawLine((int) right.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r1, new Point(0,0,0)).getY(), (int) right.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r1, new Point(0,0,0)).getY(), (int) right.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r1, new Point(0,0,0)).getY(), (int) right.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r1, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r1, new Point(0,0,0)).getY(), (int) right.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r1, new Point(0,0,0)).getY());
        
        g.setColor(Color.GREEN);
        g.drawLine((int) left.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r2, new Point(0,0,0)).getY(), (int) left.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r2, new Point(0,0,0)).getY(), (int) left.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r2, new Point(0,0,0)).getY(), (int) left.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r2, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r2, new Point(0,0,0)).getY(), (int) left.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r2, new Point(0,0,0)).getY());
        
        g.drawLine((int) right.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r2, new Point(0,0,0)).getY(), (int) right.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r2, new Point(0,0,0)).getY(), (int) right.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r2, new Point(0,0,0)).getY(), (int) right.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r2, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r2, new Point(0,0,0)).getY(), (int) right.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r2, new Point(0,0,0)).getY());
        
        g.drawLine(226,251,542,251);
        
        g.drawLine(226,299,542,299);
       }else{
          g.clearRect(0, 0, 770, 600);
        obTopLeft.draw(g);
        obTopBot.draw(g);
        obTopRight.draw(g);
        
        obBotLeft.draw(g);
        obBotTop.draw(g);
        obBotRight.draw(g);
        g.drawLine(0, 0, 770, 0);
        g.drawLine(770, 0, 770, 600);
        g.drawLine(770, 600, 0, 600);
        g.drawLine(0, 600, 0, 0);
        r1.getSrodek();
        r2.getSrodek();
        g.setColor(Color.BLUE);
        g.drawLine((int) left.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r1, new Point(0,0,0)).getY(), (int) left.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r1, new Point(0,0,0)).getY(), (int) left.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r1, new Point(0,0,0)).getY(), (int) left.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r1, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r1, new Point(0,0,0)).getY(), (int) left.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r1, new Point(0,0,0)).getY());
        
        g.drawLine((int) right.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r1, new Point(0,0,0)).getY(), (int) right.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r1, new Point(0,0,0)).getY(), (int) right.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r1, new Point(0,0,0)).getY(), (int) right.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r1, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r1, new Point(0,0,0)).getY(), (int) right.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r1, new Point(0,0,0)).getY());
        
        g.setColor(Color.GREEN);
        g.drawLine((int) left.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r2, new Point(0,0,0)).getY(), (int) left.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r2, new Point(0,0,0)).getY(), (int) left.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r2, new Point(0,0,0)).getY(), (int) left.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r2, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r2, new Point(0,0,0)).getY(), (int) left.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r2, new Point(0,0,0)).getY());
        
        g.drawLine((int) right.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r2, new Point(0,0,0)).getY(), (int) right.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r2, new Point(0,0,0)).getY(), (int) right.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r2, new Point(0,0,0)).getY(), (int) right.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r2, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r2, new Point(0,0,0)).getY(), (int) right.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r2, new Point(0,0,0)).getY());
        
        g.drawLine(226,251,542,251);
        
        g.drawLine(226,299,542,299);
       }
       
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
      
    //droga dla robota 90*
      if(jCheckBox2.isSelected()){
       g.setColor(Color.green);
      g.drawLine((int)r2.getSrodek().getX(), (int)r2.getSrodek().getY(), 
              (int)left.getFreeCenter().getX(), (int)left.getFreeCenter().getY());
      g.drawLine((int)left.getFreeCenter().getX(), (int)left.getFreeCenter().getY(), 226, 265);
      g.drawLine(226, 265, (int)center.getFreeCenter().getX(), (int)center.getFreeCenter().getY());
      g.drawLine((int)center.getFreeCenter().getX(), (int)center.getFreeCenter().getY(), 542, 265);
      g.drawLine(542, 265,(int)right.getFreeCenter().getX(), (int)right.getFreeCenter().getY());
      g.drawLine((int)right.getFreeCenter().getX(), (int)right.getFreeCenter().getY(),
              (int)right.FreeDotRB(r2, new Point(0,0,1)).getX(),(int)right.FreeDotRB(r2, new Point(0,0,1)).getY() ); 
      
      }else if(jCheckBox1.isSelected()){
        g.clearRect(0, 0, 770, 600);
        obTopLeft.draw(g);
        obTopBot.draw(g);
        obTopRight.draw(g);
        
        obBotLeft.draw(g);
        obBotTop.draw(g);
        obBotRight.draw(g);
        g.drawLine(0, 0, 770, 0);
        g.drawLine(770, 0, 770, 600);
        g.drawLine(770, 600, 0, 600);
        g.drawLine(0, 600, 0, 0);
        r1.getSrodek();
        r2.getSrodek();
        
        g.setColor(Color.blue);
           g.drawLine((int)r1.getSrodek().getX(), (int)r1.getSrodek().getY(),
                   (int)left.getFreeCenter().getX(), (int)left.getFreeCenter().getY());
           g.drawLine((int)left.getFreeCenter().getX(), (int)left.getFreeCenter().getY(), 226, 265);
           g.drawLine(542, 265, (int)right.getFreeCenter().getX(), (int)right.getFreeCenter().getY());
           g.drawLine((int)right.getFreeCenter().getX(), (int)right.getFreeCenter().getY(),
                   (int)right.FreeDotRB(r1, new Point(0,0,0)).getX(), (int)right.FreeDotRB(r1, new Point(0,0,0)).getY());
           
           g.setColor(Color.BLUE);
        g.drawLine((int) left.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r1, new Point(0,0,0)).getY(), (int) left.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r1, new Point(0,0,0)).getY(), (int) left.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r1, new Point(0,0,0)).getY(), (int) left.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r1, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r1, new Point(0,0,0)).getY(), (int) left.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r1, new Point(0,0,0)).getY());
        
        g.drawLine((int) right.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r1, new Point(0,0,0)).getY(), (int) right.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r1, new Point(0,0,0)).getY(), (int) right.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r1, new Point(0,0,0)).getY(), (int) right.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r1, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r1, new Point(0,0,0)).getY(), (int) right.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r1, new Point(0,0,0)).getY());
        
        g.setColor(Color.GREEN);
        g.drawLine((int) left.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r2, new Point(0,0,0)).getY(), (int) left.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r2, new Point(0,0,0)).getY(), (int) left.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r2, new Point(0,0,0)).getY(), (int) left.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r2, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r2, new Point(0,0,0)).getY(), (int) left.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r2, new Point(0,0,0)).getY());
        
        g.drawLine((int) right.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r2, new Point(0,0,0)).getY(), (int) right.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r2, new Point(0,0,0)).getY(), (int) right.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r2, new Point(0,0,0)).getY(), (int) right.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r2, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r2, new Point(0,0,0)).getY(), (int) right.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r2, new Point(0,0,0)).getY());
        
        g.drawLine(226,251,542,251);
        
        g.drawLine(226,299,542,299);
      }else {
         g.clearRect(0, 0, 770, 600);
        obTopLeft.draw(g);
        obTopBot.draw(g);
        obTopRight.draw(g);
        
        obBotLeft.draw(g);
        obBotTop.draw(g);
        obBotRight.draw(g);
        g.drawLine(0, 0, 770, 0);
        g.drawLine(770, 0, 770, 600);
        g.drawLine(770, 600, 0, 600);
        g.drawLine(0, 600, 0, 0);
        r1.getSrodek();
        r2.getSrodek();  
        
        g.setColor(Color.BLUE);
        g.drawLine((int) left.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r1, new Point(0,0,0)).getY(), (int) left.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r1, new Point(0,0,0)).getY(), (int) left.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r1, new Point(0,0,0)).getY(), (int) left.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r1, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r1, new Point(0,0,0)).getY(), (int) left.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r1, new Point(0,0,0)).getY());
        
        g.drawLine((int) right.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r1, new Point(0,0,0)).getY(), (int) right.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotLB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r1, new Point(0,0,0)).getY(), (int) right.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r1, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRB(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r1, new Point(0,0,0)).getY(), (int) right.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r1, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r1, new Point(0,0,0)).getY(), (int) right.FreeDotLT(r1, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r1, new Point(0,0,0)).getY());
        
        g.setColor(Color.GREEN);
        g.drawLine((int) left.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r2, new Point(0,0,0)).getY(), (int) left.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLB(r2, new Point(0,0,0)).getY(), (int) left.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRB(r2, new Point(0,0,0)).getY(), (int) left.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r2, new Point(0,0,0)).getY());
        g.drawLine((int) left.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotRT(r2, new Point(0,0,0)).getY(), (int) left.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) left.FreeDotLT(r2, new Point(0,0,0)).getY());
        
        g.drawLine((int) right.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r2, new Point(0,0,0)).getY(), (int) right.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotLB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLB(r2, new Point(0,0,0)).getY(), (int) right.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r2, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRB(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRB(r2, new Point(0,0,0)).getY(), (int) right.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r2, new Point(0,0,0)).getY());
        g.drawLine((int) right.FreeDotRT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotRT(r2, new Point(0,0,0)).getY(), (int) right.FreeDotLT(r2, new Point(0,0,0)).getX(), (int) right.FreeDotLT(r2, new Point(0,0,0)).getY());
        
        g.drawLine(226,251,542,251);
        
        g.drawLine(226,299,542,299);
      }
      
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        super.paintComponents(g);
        Graphics2D g2 = (Graphics2D) g;
        Rectangle2D rect = new Rectangle2D.Double(x, y, 30, 60);
        g2.fill(rect);
        t.start();
    }//GEN-LAST:event_jButton4ActionPerformed

    
    @Override
    public void actionPerformed(ActionEvent e){
        
        try {
            TimeUnit.SECONDS.sleep(1);
        } catch (InterruptedException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
        }
        x += velX;
        y += velY;
        this.repaint();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables

    
}
